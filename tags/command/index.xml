<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>command on Kouler</title>
    <link>https://kouler.com/tags/command/</link>
    <description>Recent content in command on Kouler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 27 Jul 2020 00:22:31 +0800</lastBuildDate>
    
	<atom:link href="https://kouler.com/tags/command/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker 常用命令</title>
      <link>https://kouler.com/posts/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 27 Jul 2020 00:22:31 +0800</pubDate>
      
      <guid>https://kouler.com/posts/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看 Docker 信息   常看 docker 版本：
1$ docker version   查看 docker 系统信息：
1$ docker info   镜像操作  从 DockerHub 检索镜像 1$ docker search image_name  拉取镜像 1$ docker pull image_name  删除镜像 1$ docker rmi image_name  列出镜像 1$ docker images  显示镜像历史 1$ docker history image_name   容器启动   启动容器并启动 bash：
1$ docker run -i -t &amp;lt;image_name/continar_id&amp;gt; /bin/bash   启动容器并启动 sh：</description>
    </item>
    
    <item>
      <title>使用 Hugo</title>
      <link>https://kouler.com/posts/use-hugo/</link>
      <pubDate>Fri, 17 Jan 2020 22:42:14 +0800</pubDate>
      
      <guid>https://kouler.com/posts/use-hugo/</guid>
      <description>Hugo 安装和配置  Hugo Documentation minimal-bootstrap-hugo-theme  Hugo 常用命令 1$ hugo help // 帮助命令 2$ hugo version // 打印版本号 3$ hugo new site sitename // 创建新站点 4$ hugo new posts/new-post.md // 创建新文章 5$ hugo // 生成静态页面 6$ hugo server // 启动 Hugo Web Server 在 Github 托管 Hugo  Host on GitHub  Github Pages site 配置个人域名  在发布项目根目录添加 CNAME 文件，内容为个人域名 配置个人域名 DNS，添加 CNAME 记录，将 www 子域指向个人 Github Pages site 地址，yourname.</description>
    </item>
    
    <item>
      <title>Tmux 常用命令和快捷键</title>
      <link>https://kouler.com/posts/tmux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Wed, 07 Aug 2019 17:43:42 +0800</pubDate>
      
      <guid>https://kouler.com/posts/tmux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>Tmux 命令 # 开启一个 Tmux Session $ tmux new -s name # 断开当前会话，会话在后台运行，等同于 `Ctrl + B` + `D` $ tmux detach # 查看当前 Tmux 中有哪些 Session $ tmux ls # 回到 Tmux Session 中 $ tmux a -t name（or at，or attach） # 关闭demo会话 tmux kill-session -t demo # 关闭服务器，所有的会话都将关闭 tmux kill-server Tmux 快捷键 Tmux Session 中的命令需要先按下 Tmux 前缀键（默认是 Ctrl + B）
# 会话（Session） 指令 ? # 快捷键帮助列表 d # detach，退出 Tmux Session，回到父级 Shell r # 强制重载当前会话 : # 进入命令行模式，此时可直接输入ls等命令 s # 列出所有 Session，可通过 j, k, 方向键选择，回车切换 $ # 为当前 Session 命名 # 窗口（window）指令 c # 新建 Window &amp;amp; # 关闭当前窗口 p # 切换到上一窗口 n # 切换到下一窗口 0~9 # 切换到指定 Window w # 打开窗口列表，用于且切换窗口 , # 为当前 Window 命名 .</description>
    </item>
    
    <item>
      <title>Screen 命令配置和常用操作</title>
      <link>https://kouler.com/posts/screen%E5%91%BD%E4%BB%A4%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 10 Jul 2019 20:48:42 +0800</pubDate>
      
      <guid>https://kouler.com/posts/screen%E5%91%BD%E4%BB%A4%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>配置文件 该配置在screen底部状态栏显示窗口列表的名称，更易于管理会话和窗口
## ~/.screenrc ## 屏幕缓冲区4096行 defscrollback 4096 ## 下标签设置 hardstatus on hardstatus alwayslastline hardstatus string &amp;quot;%{= kw}%-w%{= kG}%{+b}[%n %t]%{-b}%{= kw}%+w %=%d %M %0c %{g}%H%{-}&amp;quot; termcapinfo rxvt &#39;hs:ts=\E]2;:fs=\007:ds=\E]2;screen\007&#39; termcapinfo xterm ti@:te@ termcapinfo xterm &#39;hs:ts=\E]2;:fs=\007:ds=\E]2;screen\007&#39; 常用操作 1screen -S name # 创建名称为 name 的会话 2screen -t name # 创建名称为 name 的窗口 3screen -ls # 显示存在的会话 4screen -r name # 唤起一个被放入后台的会话 Ctrl + a, ? # 显示所有按键绑定信息 Ctrl + a, w # 显示所有窗口列表 Ctrl + a, Ctrl + a # 切换到之前的窗口 Ctrl + a, d # 暂离当前会话，将当前会话放入后台 Ctrl + a, c # 在当前会话中创建一个新窗口 Ctrl + a, A # 为当前窗口设置名称 Ctrl + a, p # 上一个窗口 Ctrl + a, n # 下一个窗口 Ctrl + a, 0-9 # 切换到 0-9 窗口 Ctrl + a, k # 杀掉当前窗口 Ctrl + a, [ # 拷贝模式 </description>
    </item>
    
    <item>
      <title>PhpStorm 常用快捷键</title>
      <link>https://kouler.com/posts/phpstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 21 Jun 2016 00:38:50 +0800</pubDate>
      
      <guid>https://kouler.com/posts/phpstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>文本编辑    快捷键 描述     Command + Alt + I 对当前文件进行格式化排版   Control + G 顺序选中相同的文本   Shift + Enter 在当前行下方插入新行   Command + Alt + Enter 在当前行上方插入新行   Command + / 单行注释   Command + Shift + / 块代码注释   Command + D 复制当前行   Command + P 查看当前函数参数   Command + Shift + Enter 补全代码（if）   Alt + / 自动完成   Alt + Click 插入多个光标（鼠标单击）   Alt Alt + Up 向上插入多个光标（双击 Alt 并按住）   Alt Alt + Down 向下插入多个光标（双击 Alt 并按住）   Alt + Double Click 选中多个文本（鼠标双击）   Alt + Mouse 选中多个文本（鼠标拖动）   Ctrl + Mouse 复制选中文本（鼠标拖动）   Command + Mouse 移动选中文本（鼠标拖动）   Command + J 活动代码提示   Command + Alt + T 插入环绕代码   Command + .</description>
    </item>
    
    <item>
      <title>Bash 命令行快捷键</title>
      <link>https://kouler.com/posts/bash%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 23 May 2016 22:45:49 +0800</pubDate>
      
      <guid>https://kouler.com/posts/bash%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>编辑命令 Ctrl + a ：移到命令行首 Ctrl + e ：移到命令行尾 Ctrl + f ：按字符前移（右向） Ctrl + b ：按字符后移（左向） Ctrl + xx：在命令行首和光标之间移动 Ctrl + u ：从光标处删除至命令行首 Ctrl + k ：从光标处删除至命令行尾 Ctrl + d ：删除光标后的字符 Ctrl + h ：删除光标前的字符 Bang (!) 命令 !!： 执行上一条命令 !blah： 执行最近的以 blah 开头的命令，如 !ls !blah:p：仅打印输出，而不执行 !$： 上一条命令的最后一个参数，与 Alt + . 相同 !$:p： 打印输出 !$ 的内容 !*： 上一条命令的所有参数 !*:p： 打印输出 !* 的内容 ^blah： 删除上一条命令中的 blah ^blah^foo： 将上一条命令中的 blah 替换为 foo ^blah^foo^： 将上一条命令中所有的 blah 都替换为 foo 参考 &amp;amp; 扩展阅读  让你提升命令行效率的 Bash 快捷键  </description>
    </item>
    
    <item>
      <title>PostgreSQL 常用操作</title>
      <link>https://kouler.com/posts/postgresql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 03 Apr 2016 12:21:24 +0800</pubDate>
      
      <guid>https://kouler.com/posts/postgresql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>增删改查 SQL 语句 1# 插入数据 2INSERT INTO user_tbl(name, signup_date) VALUES(&amp;#39;张三&amp;#39;, &amp;#39;2013-12-22&amp;#39;); 3 4# 查询记录 5SELECT * FROM user_tbl; 6 7# 更新数据 8UPDATE user_tbl set name = &amp;#39;李四&amp;#39; WHERE name = &amp;#39;张三&amp;#39;; 9 10# 删除记录 11DELETE FROM user_tbl WHERE name = &amp;#39;李四&amp;#39; ; 序列操作 SQL 语句 1# 查看当前序列的值 2SELECT currval(&amp;#39;user_id_seq&amp;#39;); 3 4# 设置序列的初始值为 100 5select setval(&amp;#39;user_id_seq&amp;#39;,100); 6 7# 递增序列的值并返回 8select nextval(&amp;#39;user_id_seq&amp;#39;); 查询 SQL 语句 1# 转换时间戳为格式化时间函数 TO_TIMESTAMP() 2SELECT TO_TIMESTAMP(created_at) FROM user; 3 4# 转换时间戳为格式化时间函数 TO_TIMESTAMP() ，显示为中国时区 5# 使用 &amp;#39;CST&amp;#39; 时区不一定显示为中国本地时间，建议使用 &amp;#39;Asia/Shanghai&amp;#39; 时区 6SELECT TO_TIMESTAMP(created_at) AT TIME ZONE &amp;#39;CST&amp;#39; FROM user; 7SELECT TO_TIMESTAMP(created_at) AT TIME ZONE &amp;#39;Asia/Shanghai&amp;#39; FROM user; 8 9# 返回字段中的条件判断 10SELECT name, CASE sex WHEN 1 THEN &amp;#39;男&amp;#39; WHEN 2 THEN &amp;#39;女&amp;#39; ELSE &amp;#39;保密&amp;#39; END AS sex, age FROM user; 11 12# 拼接字符串 13SELECT CONCAT(&amp;#39;姓名:&amp;#39;, name) AS name, age FROM user; 14 15# 数值计算 16SELECT id, amount/100 FROM order; 17 18# 保留 2 位小数精度 19SELECT id, round(100/3, 2) FROM order; 20 21# 解析数组格式数据，获取数据时先将数组转为 JSON，再用编程语言函数将 JSON 转为可识别格式，例如 PHP 中的 json_decode() 22SELECT array_to_json(ids) FROM user; Schema 操作 SQL 语句 1# 创建新表 2CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE); 3 4# 添加字段 5ALTER TABLE user_tbl ADD email VARCHAR(40); 6ALTER TABLE user_tbl ADD COLUMN images jsonb DEFAULT &amp;#39;{}&amp;#39;; 7 8# 更改字段类型 9ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL; 10 11# 更改字段类型长度 12ALTER TABLE user_tbl ALTER COLUMN password TYPE varchar(32); 13 14# 为字段添加索引 15CREATE INDEX index_name ON user_tbl (name); 16 17# 设置字段默认值（注意字符串使用单引号） 18ALTER TABLE user_tbl ALTER COLUMN email SET DEFAULT &amp;#39;example@example.</description>
    </item>
    
  </channel>
</rss>